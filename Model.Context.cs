//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MusicDB_PROJECT
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MusicDBEntities : DbContext
    {
        public MusicDBEntities()
            : base("name=MusicDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Album> Albums { get; set; }
        public virtual DbSet<Artist> Artists { get; set; }
        public virtual DbSet<Genre> Genres { get; set; }
        public virtual DbSet<Playlist> Playlists { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Track> Tracks { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<TrackList> TrackLists { get; set; }
        public virtual DbSet<AlbumList> AlbumLists { get; set; }
        public virtual DbSet<ArtistView> ArtistViews { get; set; }
        public virtual DbSet<PlaylistView> PlaylistViews { get; set; }
    
        [DbFunction("MusicDBEntities", "GetAlbumsByGenre")]
        public virtual IQueryable<GetAlbumsByGenre_Result> GetAlbumsByGenre(Nullable<int> genreId)
        {
            var genreIdParameter = genreId.HasValue ?
                new ObjectParameter("genreId", genreId) :
                new ObjectParameter("genreId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAlbumsByGenre_Result>("[MusicDBEntities].[GetAlbumsByGenre](@genreId)", genreIdParameter);
        }
    
        [DbFunction("MusicDBEntities", "GetPlaylistTracks")]
        public virtual IQueryable<GetPlaylistTracks_Result> GetPlaylistTracks(Nullable<int> playlistId)
        {
            var playlistIdParameter = playlistId.HasValue ?
                new ObjectParameter("playlistId", playlistId) :
                new ObjectParameter("playlistId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetPlaylistTracks_Result>("[MusicDBEntities].[GetPlaylistTracks](@playlistId)", playlistIdParameter);
        }
    
        [DbFunction("MusicDBEntities", "SearchTracksByKeyword")]
        public virtual IQueryable<SearchTracksByKeyword_Result> SearchTracksByKeyword(string keyword)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SearchTracksByKeyword_Result>("[MusicDBEntities].[SearchTracksByKeyword](@keyword)", keywordParameter);
        }
    
        public virtual int AddArtist(Nullable<int> artistId, string artistName, string country, string description)
        {
            var artistIdParameter = artistId.HasValue ?
                new ObjectParameter("ArtistId", artistId) :
                new ObjectParameter("ArtistId", typeof(int));
    
            var artistNameParameter = artistName != null ?
                new ObjectParameter("ArtistName", artistName) :
                new ObjectParameter("ArtistName", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddArtist", artistIdParameter, artistNameParameter, countryParameter, descriptionParameter);
        }
    
        public virtual int AddGenre(Nullable<int> id, string genreName, string description)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var genreNameParameter = genreName != null ?
                new ObjectParameter("GenreName", genreName) :
                new ObjectParameter("GenreName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddGenre", idParameter, genreNameParameter, descriptionParameter);
        }
    
        public virtual int AddPlaylist(Nullable<int> playlistId, string playlistName, string description)
        {
            var playlistIdParameter = playlistId.HasValue ?
                new ObjectParameter("PlaylistId", playlistId) :
                new ObjectParameter("PlaylistId", typeof(int));
    
            var playlistNameParameter = playlistName != null ?
                new ObjectParameter("PlaylistName", playlistName) :
                new ObjectParameter("PlaylistName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPlaylist", playlistIdParameter, playlistNameParameter, descriptionParameter);
        }
    
        public virtual int AddTrack(Nullable<int> id, string trackName, Nullable<int> albumId, Nullable<int> length, Nullable<int> trackNumber, string lyrics)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var trackNameParameter = trackName != null ?
                new ObjectParameter("TrackName", trackName) :
                new ObjectParameter("TrackName", typeof(string));
    
            var albumIdParameter = albumId.HasValue ?
                new ObjectParameter("AlbumId", albumId) :
                new ObjectParameter("AlbumId", typeof(int));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(int));
    
            var trackNumberParameter = trackNumber.HasValue ?
                new ObjectParameter("TrackNumber", trackNumber) :
                new ObjectParameter("TrackNumber", typeof(int));
    
            var lyricsParameter = lyrics != null ?
                new ObjectParameter("Lyrics", lyrics) :
                new ObjectParameter("Lyrics", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTrack", idParameter, trackNameParameter, albumIdParameter, lengthParameter, trackNumberParameter, lyricsParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        [DbFunction("MusicDBEntities", "SearchArtistByName")]
        public virtual IQueryable<SearchArtistByName_Result> SearchArtistByName(string artistName)
        {
            var artistNameParameter = artistName != null ?
                new ObjectParameter("artistName", artistName) :
                new ObjectParameter("artistName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SearchArtistByName_Result>("[MusicDBEntities].[SearchArtistByName](@artistName)", artistNameParameter);
        }
    
        [DbFunction("MusicDBEntities", "SearchAlbumByTitle")]
        public virtual IQueryable<SearchAlbumByTitle_Result> SearchAlbumByTitle(string albumTitle)
        {
            var albumTitleParameter = albumTitle != null ?
                new ObjectParameter("albumTitle", albumTitle) :
                new ObjectParameter("albumTitle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SearchAlbumByTitle_Result>("[MusicDBEntities].[SearchAlbumByTitle](@albumTitle)", albumTitleParameter);
        }
    
        [DbFunction("MusicDBEntities", "FilterTracksByAlbumId")]
        public virtual IQueryable<FilterTracksByAlbumId_Result> FilterTracksByAlbumId(Nullable<int> albumId)
        {
            var albumIdParameter = albumId.HasValue ?
                new ObjectParameter("albumId", albumId) :
                new ObjectParameter("albumId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FilterTracksByAlbumId_Result>("[MusicDBEntities].[FilterTracksByAlbumId](@albumId)", albumIdParameter);
        }
    }
}
